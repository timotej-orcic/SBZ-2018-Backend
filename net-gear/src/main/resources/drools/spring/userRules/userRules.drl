package userRules

import java.util.List;
import java.util.Optional;

import java.lang.Long;
import java.lang.Double;
import java.lang.String;
import java.lang.Math;

import com.ftn.SBZ_2018.netgear.model.Product;
import com.ftn.SBZ_2018.netgear.model.ShoppingCart;
import com.ftn.SBZ_2018.netgear.model.ShoppingCartItem;
import com.ftn.SBZ_2018.netgear.model.Discount;
import com.ftn.SBZ_2018.netgear.model.DiscountType;
import com.ftn.SBZ_2018.netgear.model.Preference;
import com.ftn.SBZ_2018.netgear.model.PreferenceType;
import com.ftn.SBZ_2018.netgear.model.User;

import com.ftn.SBZ_2018.netgear.dao.SearchNetworkSystem;
import com.ftn.SBZ_2018.netgear.dao.NetworkSystemItemDAO;

import com.ftn.SBZ_2018.netgear.service.ProductService;
import com.ftn.SBZ_2018.netgear.service.ShoppingCartService;
import com.ftn.SBZ_2018.netgear.service.PreferenceService;
import com.ftn.SBZ_2018.netgear.service.PreferenceTypeService;

declare NetworkSystemHelper
	routersCount : int
	switchesCount : int
	cableLengthTotal : int
	cableTrayLengthTotal : int	
	teleClosetsCount : int
	patchPanelsCount : int
	ethernetExtendersCount : int
	pcCount : int
	minLimit : int
	maxLimit : int
end

declare trait PreferenceTrait 
	type : String
end

global ProductService productService;
global PreferenceService preferenceService;
global PreferenceTypeService preferenceTypeService;
global User user;

rule "Single product calculate preferences 'manufactorer' start"
	agenda-group "singleProduct"
	salience 100
	no-loop true
	when
		$i : ShoppingCartItem( $product: product )
	then
		Optional<PreferenceType> pType = preferenceTypeService.findByName("manufactorer");
		List<Preference> pList = preferenceService.getAllUserPreferencesByProdTypeAndPrefType(user.getId(), $product.getType(), "manufactorer");
		if(pList.isEmpty()){
			pType.ifPresent(pt -> {
				insert(new Preference(new Long(-1), user, $product.getType(), pt, $product.getManufactorer(), $i.getQuantity(), new Double(1)));
			});		
		}
		else{
			Preference myPref = pList.stream().filter(p -> p.getValue().equals($product.getManufactorer())).findFirst().orElse(null);
			if(myPref == null){
				pType.ifPresent(pt -> {
					insert(new Preference(new Long(-1), user, $product.getType(), pt, $product.getManufactorer(), $i.getQuantity(), new Double(1)));
				});
			}
			else{
				insert(myPref);
			}
		}
		insert(new String("manufactorer"));
end

rule "Single product calculate preferences 'price 0-100' start"
	agenda-group "singleProduct"
	salience 100
	no-loop true
	when
		$i : ShoppingCartItem( $product: product, (product.price < 100) )
	then
		Optional<PreferenceType> pType = preferenceTypeService.findByName("price");
		List<Preference> pList = preferenceService.getAllUserPreferencesByProdTypeAndPrefType(user.getId(), $product.getType(), "price");
		Preference pref = pList.stream().filter(p -> p.getValue().equals("0-100")).findFirst().orElse(null);		
		if(pref == null){
			pType.ifPresent(pt -> {
				insert(new Preference(new Long(-1), user, $product.getType(), pt, "0-100", $i.getQuantity(), new Double(1)));
			});				
		}
		else{
			insert(pref);
		}
		insert(new String("price"));
end

rule "Single product calculate preferences 'price 100-500' start"
	agenda-group "singleProduct"
	salience 100
	no-loop true
	when
		$i : ShoppingCartItem( $product: product, (100 <= product.price && product.price < 500) )
	then
		Optional<PreferenceType> pType = preferenceTypeService.findByName("price");
		List<Preference> pList = preferenceService.getAllUserPreferencesByProdTypeAndPrefType(user.getId(), $product.getType(), "price");
		Preference pref = pList.stream().filter(p -> p.getValue().equals("100-500")).findFirst().orElse(null);		
		if(pref == null){
			pType.ifPresent(pt -> {
				insert(new Preference(new Long(-1), user, $product.getType(), pt, "100-500", $i.getQuantity(), new Double(1)));
			});				
		}
		else{
			insert(pref);
		}
		insert(new String("price"));
end

rule "Single product calculate preferences 'price 500-1000' start"
	agenda-group "singleProduct"
	salience 100
	no-loop true
	when
		$i : ShoppingCartItem( $product: product, (500 <= product.price && product.price < 1000) )
	then
		Optional<PreferenceType> pType = preferenceTypeService.findByName("price");
		List<Preference> pList = preferenceService.getAllUserPreferencesByProdTypeAndPrefType(user.getId(), $product.getType(), "price");
		Preference pref = pList.stream().filter(p -> p.getValue().equals("500-1000")).findFirst().orElse(null);		
		if(pref == null){
			pType.ifPresent(pt -> {
				insert(new Preference(new Long(-1), user, $product.getType(), pt, "500-1000", $i.getQuantity(), new Double(1)));
			});				
		}
		else{
			insert(pref);
		}
		insert(new String("price"));
end

rule "Single product calculate preferences 'price 1000+' start"
	agenda-group "singleProduct"
	salience 100
	no-loop true
	when
		$i : ShoppingCartItem( $product: product, (product.price >= 1000) )
	then
		Optional<PreferenceType> pType = preferenceTypeService.findByName("price");
		List<Preference> pList = preferenceService.getAllUserPreferencesByProdTypeAndPrefType(user.getId(), $product.getType(), "price");
		Preference pref = pList.stream().filter(p -> p.getValue().equals("1000+")).findFirst().orElse(null);		
		if(pref == null){
			pType.ifPresent(pt -> {
				insert(new Preference(new Long(-1), user, $product.getType(), pt, "1000+", $i.getQuantity(), new Double(1)));
			});				
		}
		else{
			insert(pref);
		}
		insert(new String("price"));
end

rule "Single product calculate preferences 'warranty 0-6' start"
	agenda-group "singleProduct"
	salience 100
	no-loop true
	when
		$i : ShoppingCartItem( $product: product, (product.warrantyInMonths < 6) )
	then
		Optional<PreferenceType> pType = preferenceTypeService.findByName("warranty");
		List<Preference> pList = preferenceService.getAllUserPreferencesByProdTypeAndPrefType(user.getId(), $product.getType(), "warranty");
		Preference pref = pList.stream().filter(p -> p.getValue().equals("0-6")).findFirst().orElse(null);		
		if(pref == null){
			pType.ifPresent(pt -> {
				insert(new Preference(new Long(-1), user, $product.getType(), pt, "0-6", $i.getQuantity(), new Double(1)));
			});				
		}
		else{
			insert(pref);
		}
		insert(new String("warranty"));
end

rule "Single product calculate preferences 'warranty 6-12' start"
	agenda-group "singleProduct"
	salience 100
	no-loop true
	when
		$i : ShoppingCartItem( $product: product, (6 <= product.warrantyInMonths && product.warrantyInMonths < 12) )
	then
		Optional<PreferenceType> pType = preferenceTypeService.findByName("warranty");
		List<Preference> pList = preferenceService.getAllUserPreferencesByProdTypeAndPrefType(user.getId(), $product.getType(), "warranty");
		Preference pref = pList.stream().filter(p -> p.getValue().equals("6-12")).findFirst().orElse(null);		
		if(pref == null){
			pType.ifPresent(pt -> {
				insert(new Preference(new Long(-1), user, $product.getType(), pt, "6-12", $i.getQuantity(), new Double(1)));
			});				
		}
		else{
			insert(pref);
		}
		insert(new String("warranty"));
end

rule "Single product calculate preferences 'warranty 12-24' start"
	agenda-group "singleProduct"
	salience 100
	no-loop true
	when
		$i : ShoppingCartItem( $product: product, (12 <= product.warrantyInMonths && product.warrantyInMonths < 24) )
	then
		Optional<PreferenceType> pType = preferenceTypeService.findByName("warranty");
		List<Preference> pList = preferenceService.getAllUserPreferencesByProdTypeAndPrefType(user.getId(), $product.getType(), "warranty");
		Preference pref = pList.stream().filter(p -> p.getValue().equals("12-24")).findFirst().orElse(null);		
		if(pref == null){
			pType.ifPresent(pt -> {
				insert(new Preference(new Long(-1), user, $product.getType(), pt, "12-24", $i.getQuantity(), new Double(1)));
			});				
		}
		else{
			insert(pref);
		}
		insert(new String("warranty"));
end

rule "Single product calculate preferences 'warranty 24-48' start"
	agenda-group "singleProduct"
	salience 100
	no-loop true
	when
		$i : ShoppingCartItem( $product: product, (24 <= product.warrantyInMonths && product.warrantyInMonths < 48) )
	then
		Optional<PreferenceType> pType = preferenceTypeService.findByName("warranty");
		List<Preference> pList = preferenceService.getAllUserPreferencesByProdTypeAndPrefType(user.getId(), $product.getType(), "warranty");
		Preference pref = pList.stream().filter(p -> p.getValue().equals("24-48")).findFirst().orElse(null);		
		if(pref == null){
			pType.ifPresent(pt -> {
				insert(new Preference(new Long(-1), user, $product.getType(), pt, "24-48", $i.getQuantity(), new Double(1)));
			});				
		}
		else{
			insert(pref);
		}
		insert(new String("warranty"));
end

rule "Single product calculate preferences 'warranty 48+' start"
	agenda-group "singleProduct"
	salience 100
	no-loop true
	when
		$i : ShoppingCartItem( $product: product, (product.warrantyInMonths >= 48) )
	then
		Optional<PreferenceType> pType = preferenceTypeService.findByName("warranty");
		List<Preference> pList = preferenceService.getAllUserPreferencesByProdTypeAndPrefType(user.getId(), $product.getType(), "warranty");
		Preference pref = pList.stream().filter(p -> p.getValue().equals("48+")).findFirst().orElse(null);		
		if(pref == null){
			pType.ifPresent(pt -> {
				insert(new Preference(new Long(-1), user, $product.getType(), pt, "48+", $i.getQuantity(), new Double(1)));
			});				
		}
		else{
			insert(pref);
		}
		insert(new String("warranty"));
end

rule "Single product edit existing preference"
	agenda-group "singleProduct"
	salience 99
	no-loop true
	when
		$type : String( )
		$p : Preference( $prodType: productType, $prefType: preferenceType, (id != -1), (preferenceType.name == $type))
		$i : ShoppingCartItem( $product: product )
	then
		List<Preference> pList = preferenceService.getAllUserPreferencesByProdTypeAndPrefType(user.getId(), $product.getType(), $type);
		if(!pList.isEmpty()){
			Preference myPref = pList.stream().filter(p -> p.getId() == $p.getId()).findFirst().orElse(null);
			if (myPref != null){
				myPref.setProductsCount(myPref.getProductsCount() + $i.getQuantity());
				int sum = pList.stream().mapToInt(i -> i.getProductsCount()).sum();
				pList.forEach(p -> {
					Double percentage = (double) p.getProductsCount() / sum;
					p.setPercentage(percentage);
					preferenceService.insertPreference(p);
				});
			}
		}
end


rule "Single product add new preference"
	agenda-group "singleProduct"
	salience 99
	no-loop true
	when
		$type : String( )
		$p : Preference( $prodType: productType, $prefType: preferenceType, (id == -1), (preferenceType.name == $type))
		$i : ShoppingCartItem( $product: product )
	then
		List<Preference> pList = preferenceService.getAllUserPreferencesByProdTypeAndPrefType(user.getId(), $product.getType(), $type);
		if(!pList.isEmpty()){
			pList.add($p);
			int sum = pList.stream().mapToInt(i -> i.getProductsCount()).sum();
			pList.forEach(p -> {
				Double percentage = (double) p.getProductsCount() / sum;
				p.setPercentage(percentage);
				preferenceService.insertPreference(p);
			});
		}
		else {
			preferenceService.insertPreference($p);
		}
end

rule "Network system 'Copper' start"
	agenda-group "networkSystem"
	salience 100
	no-loop true
	when
		$s : SearchNetworkSystem ( (streetCabling == "Copper"), $floors : floorsCount,
			$avgFloorSurface : avarageFloorSurface, $avgOfficeCnt :  avarageOfficeCountByFloor,
			$avgPcCount : avarageComputerCountByOffice, $wifi : includeWiFi,
			$wifiSurface : avarageWiFiCoverageSurfaceByFloor, $downSpeed : wantedAvarageDownloadSpeed,
			$upSpeed : wantedAvarageUploadSpeed )
	then		
		int routersCount;
		int switchesCount;
		int cableLengthTotal;
		int cableTrayLengthTotal;
		
		int teleClosetsCount;
		teleClosetsCount = 1;
		int patchPanelsCount;
		patchPanelsCount = 1;
		int ethernetExtendersCount;
		ethernetExtendersCount = 0;
		
		double surface = $floors * $avgFloorSurface;
		int officeCnt = $floors * $avgOfficeCnt.intValue();
		int pcCount = officeCnt * $avgPcCount.intValue();
		
		if($wifi){
			routersCount = (int)($wifiSurface / $avgFloorSurface) * officeCnt;
		} 
		else {
			routersCount = 0;
		}
		switchesCount = officeCnt - routersCount;
		cableLengthTotal = (int)Math.sqrt($s.getAvarageFloorSurface()) * officeCnt + 2 * pcCount;
		cableTrayLengthTotal = cableLengthTotal;		
		int minLimit = (int) ($downSpeed + $upSpeed) / 2;
		int maxLimit;
		maxLimit = 100;
		
		NetworkSystemHelper nsh = new NetworkSystemHelper(routersCount, switchesCount, cableLengthTotal,
			cableTrayLengthTotal, teleClosetsCount, patchPanelsCount, ethernetExtendersCount,
			pcCount, minLimit, maxLimit);
		insert(nsh);
end

rule "Network system insert facts"
	agenda-group "networkSystem"
	salience 99
	no-loop true
	when
		$nsh : NetworkSystemHelper ( )
	then
		List<Product> routersList = productService.getAllProductsByTypeAndSpecialLabel("Router", $nsh.getMinLimit(), $nsh.getMaxLimit());
		routersList.forEach(p -> {
			if(p.getLagerQuantity() >= $nsh.getRoutersCount()){
				insert(new NetworkSystemItemDAO(p, $nsh.getRoutersCount()));
			}
		});
		
		List<Product> switchesList = productService
			.getAllProductsByTypeAndSpecialLabel("Switch", (int)$nsh.getPcCount() / 2, $nsh.getPcCount() * 2);
		switchesList.forEach(p -> {
			if(p.getLagerQuantity() >= $nsh.getSwitchesCount()){
				insert(new NetworkSystemItemDAO(p, $nsh.getSwitchesCount()));
			}
		});
		
		List<Product> cablesList = productService
			.getAllProductsByTypeAndSpecialLabel("LAN Cable", $nsh.getMinLimit(), $nsh.getMaxLimit());
		cablesList.forEach(p -> {
			if(p.getLagerQuantity() * 10 >= $nsh.getCableLengthTotal()){
				insert(new NetworkSystemItemDAO(p, (int) $nsh.getCableLengthTotal() / 10));
			}
		});
		
		List<Product> cableTraysList = productService
			.getAllProductsByType("Cable tray");
		cableTraysList.forEach(p -> {
			if(p.getLagerQuantity() * 10 >= $nsh.getCableTrayLengthTotal()){
				insert(new NetworkSystemItemDAO(p, (int) $nsh.getCableTrayLengthTotal() / 10));
			}
		});
		
		List<Product> teleClosetsList = productService.getAllProductsByType("Telecommunication closet");
		teleClosetsList.forEach(p -> {
			insert(new NetworkSystemItemDAO(p, $nsh.getTeleClosetsCount()));
		});
		
		List<Product> patchPanelsList = productService.getAllProductsByType("Patch panel");
		patchPanelsList.forEach(p -> {
			insert(new NetworkSystemItemDAO(p, $nsh.getPatchPanelsCount()));
		});
		
		List<Product> ethernetExtenderList = productService.getAllProductsByType("Ethernet extender");
		ethernetExtenderList.forEach(p -> {
			insert(new NetworkSystemItemDAO(p, $nsh.getEthernetExtendersCount()));
		});
end

query "Get all Network system items by type" (String $productType)
	$nsi : NetworkSystemItemDAO ( product.type == $productType )
end